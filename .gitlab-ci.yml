include:
  - project: 'mpf/rf/redhawk-ci/templates'
    file: 'Workflows/default.yml'
    ref: develop-2.3

variables:
  specfile: $project.spec
  redhawk_deps_loc: redhawk-dependencies/redhawk-dependencies
  other_repos: ${s3_repo_url}${redhawk_deps_loc}
  # The rh_lts_branch variable tracks the Long Term Service branch from which a topic
  # branch was forked, allowing it to still trigger that branch's test pipeline
  rh_lts_branch: 'develop-2.3'
  # By default, pull dependencies from the REDHAWK branch, but should there be
  # a need to use a different set, override that here
  commit: $CI_COMMIT_SHA
  datetime: ""

stages:
 - package-redhawk-codegen
 - package-bulkio-gpp
 - package-burstio-fei
 - abi
 - deploy

.rpmbuild: &rpmbuild
  image: ${docker_registry}redhawk/alpine-dockerd-plus-utils
  tags:
    - docker
    - redhawk
  before_script:
    - |
      # For release candidate tag a.b.c-rcn, set rpm_release = n.
      # For all other cases, set rpm_release = 0.<pipeline id>.
      if [[ "$CI_COMMIT_TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc([0-9]+)$ ]]; then
          rpm_release=${BASH_REMATCH[1]}  # The contents of the parentheses in the regular expression.
      else
          rpm_release="0.$CI_PIPELINE_ID"
      fi
      echo "rpm_release == ${rpm_release}"
  script:
    # Use RPM release from specfile if this is a tag
    - if [ -f output/repo.tar.gz ]; then cd output; tar xvf repo.tar.gz; cd -; cp -r output $project; fi
    - cd $project
    - echo "pwd => $(pwd)"
    - echo "commit hash => ${commit:0:8}"
    - datetime=$(git show -s --format=%cd ${commit})
    - echo "commit date => ${datetime}"
    - printf "FROM ${docker_registry}redhawk/rpmbuild:${dist}-${arch}-onbuild" > Dockerfile
    # Don't build redhawk tests as part of rpmbuild to save time
    - if [ "$project" == "redhawk" ]; then sed -i 's|testing||' src/Makefile.am; fi
    - proj_lower=$(echo $project | tr '[:upper:]' '[:lower:]')
    - safe_ref=$(echo ${CI_COMMIT_REF_NAME} | tr -d /| tr '[:upper:]' '[:lower:]')
    - docker login ${docker_registry} -u ${docker_user_redhawk} -p ${docker_password_redhawk}
    - docker build --tag=${docker_registry}redhawk/redhawk-rpmbuild:$proj_lower-$safe_ref-${dist}-${arch}
                   --pull
                   --no-cache
                   --build-arg "commit=${commit:0:8}"
                   --build-arg "datetime=${datetime}"
                   --build-arg "project=$project"
                   --build-arg "arch=$arch"
                   --build-arg "spec_file=$specfile"
                   --build-arg "rpm_release=$rpm_release"
                   --build-arg "other_repos=${other_repos}/yum/${rh_lts_branch}/$dist/$arch"
                   --build-arg "local_repo=$local_repo" .
    # Create a yum repository from the packages we just built and any packages we've built in a previous stage
    - id=$(docker create -it ${docker_registry}redhawk/redhawk-rpmbuild:$proj_lower-$safe_ref-$dist-$arch bash -lc 'mkdir -p /tmp/repo;
                                                for file in `find /usr/src/yum /root/rpmbuild/RPMS -name '*.rpm'`; do
                                                cp -v $file /tmp/repo;
                                                done;
                                                cd /tmp/repo;
                                                createrepo .;
                                                tar czf repo.tar.gz *')
    - docker start -a $id
    # Cleanup any previous output we've inherited
    - cd $CI_PROJECT_DIR
    - rm -rf output && mkdir output
    - docker cp $id:/tmp/repo/repo.tar.gz output/repo.tar.gz
    - docker rm -f $id || true
    - cd output
    - tar xf repo.tar.gz
    - cd $CI_PROJECT_DIR
  artifacts:
    name: $CI_JOB_NAME
    paths:
      - output/
    expire_in: 2 days
  except:
    - master
    - /^(\d+\.)?(\d+)?(\.\d+)$/

redhawk:el7:
  stage: package-redhawk-codegen
  variables:
    dist: el7
    arch: x86_64
    project: redhawk
    specfile: src/releng/redhawk.spec
    local_repo: ""
  <<: *rpmbuild

redhawk-codegen:el7:
  stage: package-redhawk-codegen
  variables:
    dist: el7
    arch: x86_64
    project: redhawk-codegen
    local_repo: ""
  <<: *rpmbuild

bulkio:el7:
  stage: package-bulkio-gpp
  dependencies:
    - redhawk:el7
  variables:
    dist: el7
    arch: x86_64
    project: bulkioInterfaces
    local_repo: output
  <<: *rpmbuild

gpp:el7:
  stage: package-bulkio-gpp
  dependencies:
    - redhawk:el7
  variables:
    dist: el7
    arch: x86_64
    project: GPP
    local_repo: output
  <<: *rpmbuild

burstio:el7:
  stage: package-burstio-fei
  dependencies:
    - bulkio:el7
  variables:
    dist: el7
    arch: x86_64
    project: burstioInterfaces
    local_repo: output
  <<: *rpmbuild

frontend:el7:
  stage: package-burstio-fei
  dependencies:
    - bulkio:el7
  variables:
    dist: el7
    arch: x86_64
    project: frontendInterfaces
    local_repo: output
  <<: *rpmbuild

# Trigger separate tests pipeline
.trigger-common: &trigger-common
  stage: deploy
  trigger:
    project: mpf/rf/redhawk-testing/core-framework
    # Feature branches trigger a test pipeline using the develop branch
    # from which they were branched unless overridden here.
    branch: $rh_lts_branch

# For bug/feature branches, require the developer to manually trigger the tests
test-trigger:branch:
  <<: *trigger-common
  variables:
    core_framework_ref_name: $CI_COMMIT_REF_NAME
    core_framework_ref_slug: $CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^develop/ && $CI_COMMIT_BRANCH !~ /^master/
      when: manual

# For develop & release branches, automatically trigger test pipeline
test-trigger:develop:
  <<: *trigger-common
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^develop/ || $CI_COMMIT_BRANCH =~ /^release/

# For release candidate tags, automatically trigger test pipeline
test-trigger:release-candidate:
  stage: deploy
  variables:
    core_framework_ref_name: $CI_COMMIT_REF_NAME
    core_framework_ref_slug: $CI_COMMIT_REF_SLUG
  trigger:
    project: mpf/rf/redhawk-testing/core-framework
    branch: $rh_lts_branch
  rules:
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+-rc([0-9]+)$/

.abi-common: &abi-common
  image: ${docker_registry}redhawk/rpmbuild:el7-x86_64
  stage: abi
  tags:
      - docker
      - redhawk
  script:
    - yum install -y libabigail
    - echo "s3url =>  s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$s3_yum_location/el7/x86_64/${rpm_name}-${base_ver_release}.el7.x86_64.rpm"
    - s3cmd get -v s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$s3_yum_location/el7/x86_64/${rpm_name}-${base_ver_release}.el7.x86_64.rpm
    - s3cmd get -v s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$s3_yum_location/el7/x86_64/${rpm_name}-debuginfo-${base_ver_release}.el7.x86_64.rpm
    - if s3cmd ls s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$s3_yum_location/el7/x86_64/ | grep -q "${rpm_name}-devel-${base_ver_release}.el7.x86_64.rpm"; then
        s3cmd get -v s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$s3_yum_location/el7/x86_64/${rpm_name}-devel-${base_ver_release}.el7.x86_64.rpm
        devel="--devel-pkg1 ${rpm_name}-devel-${base_ver_release}.el7.x86_64.rpm";
        devel="$devel --devel-pkg2 output/${rpm_name}-devel-*.el7.x86_64.rpm";
      fi
    - abipkgdiff ${rpm_name}-${base_ver_release}.el7.x86_64.rpm
                 output/${rpm_name}-[0-9]*.el7.x86_64.rpm
                 --debug-info-pkg1 ${rpm_name}-debuginfo-${base_ver_release}.el7.x86_64.rpm
                 --debug-info-pkg2 output/${rpm_name}-debuginfo-*.el7.x86_64.rpm
                 $devel
      | tee ${rpm_name}-abi-results.txt || true
  artifacts:
    paths:
      - $rpm_name-abi-results.txt
    expire_in: 30 days
  except:
    - /^(\d+\.)?(\d+)?(\.\d+)$/

redhawk:abi:
  variables:
    s3_yum_location: '2-2-0-rc5'
    rpm_name: 'redhawk'
    base_ver_release: '2.2.0-5'
  dependencies:
    - redhawk:el7
  <<: *abi-common

bulkio:abi:
  variables:
    s3_yum_location: '2-2-0-rc5'
    rpm_name: 'bulkioInterfaces'
    base_ver_release: '2.2.0-5'
  dependencies:
    - bulkio:el7
  <<: *abi-common

frontend:abi:
  variables:
    s3_yum_location: '2-2-0-rc5'
    rpm_name: 'frontendInterfaces'
    base_ver_release: '2.4.3-5'
  dependencies:
    - frontend:el7
  <<: *abi-common

burstio:abi:
  variables:
    s3_yum_location: '2-2-0-rc5'
    rpm_name: 'burstioInterfaces'
    base_ver_release: '2.2.0-5'
  dependencies:
    - burstio:el7
  <<: *abi-common

.s3: &s3
  image: ${docker_registry}redhawk/rpmbuild:$dist-$arch-onbuild
  stage: deploy
  tags:
    - docker
    - redhawk
  script:
    - CI_COMMIT_REF_SLUG_NO_RC=${CI_COMMIT_REF_SLUG%-rc[0-9]*};
    # Collect our rpms for this branch, make a repo, and push it to 'redhawk/core-framework/yum/<branch>'.
    - mkdir -p $arch
    - for file in `find output -name *.rpm`; do
        cp $file $arch;
      done
    # create and push just redhawk rpms
    - createrepo $arch
    - ls -la $arch
    - s3cmd sync -F -v --delete-removed $arch s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG/$dist/
    # if this is a release candidate ...
    - if [ "$CI_COMMIT_REF_SLUG_NO_RC" != "$CI_COMMIT_REF_SLUG" ]; then
        s3cmd sync -F -v --delete-removed $arch s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/yum/$CI_COMMIT_REF_SLUG_NO_RC/$dist/;
      fi
    # Add the dependencies for the related LTS branch, make a repo, and put it in 'redhawk/cf-and-deps/yum/<branch>'.
    - rm -r $arch/repodata  # Get rid of the repodata/ we created with `createrepo`.
    - s3cmd get -rv s3://${s3_bucket}/mpf/rf/${redhawk_deps_loc}/yum/$rh_lts_branch/${dist}/${arch}/ $arch
    - rm -rf $arch/repodata $arch/redhawk-dependencies.repo  # Get rid of extra stuff we pulled from s3.
    - createrepo $arch
    - s3cmd sync -F -v --delete-removed $arch s3://${s3_bucket}/$CI_PROJECT_NAMESPACE/cf-and-deps/yum/$CI_COMMIT_REF_SLUG/$dist/
  except:
    - master
    - /^(\d+\.)?(\d+)?(\.\d+)$/

deploy-el7:
  variables:
    dist: el7
    arch: x86_64
  dependencies:
    - redhawk:el7
    - bulkio:el7
    - burstio:el7
    - frontend:el7
    - gpp:el7
    - redhawk-codegen:el7
  <<: *s3
